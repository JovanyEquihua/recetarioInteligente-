generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id               Int            @id @default(autoincrement())
  nombre           String
  apellidoP        String
  apellidoM        String?
  email            String         @unique
  contrase_a       String         @map("contrase√±a")
  fotoPerfil       String?
  preferencias     Json?
  fechaRegistro    DateTime       @default(now())
  nombreUsuario    String         @unique
  fechaActualizado DateTime       @updatedAt
  rol              UserRole       @default(USUARIO)
  verificado       Boolean        @default(false)
  titulo           String?        
  biografia        String?        
  primerInicioSesion Boolean      @default(false) 

  Calificacion     Calificacion[]
  Comentario       Comentario[]
  Cuenta           Cuenta[]
  Favorito         Favorito[]
  ListaCompra      ListaCompra[]
  Notificacion     Notificacion[]
  Receta           Receta[]
  Reporte          Reporte[]
}



model Cuenta {
  idUsuario         Int
  tipo              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  usuario           Usuario  @relation(fields: [idUsuario], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  email   String   @unique
  token   String   @unique
  expires DateTime
  id      Int      @id @default(autoincrement())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Receta {
  id                Int                 @id @default(autoincrement())
  usuarioId         Int
  titulo            String
  descripcion       String
  tiempoPreparacion Int
  dificultad        DificultadReceta 
  porciones         Int
  imagen            String
  fechaCreacion     DateTime            @default(now())
  idTipoComida      Int
  idTipoSabor       Int
  calificaciones    Calificacion[]
  comentarios       Comentario[]
  favoritos         Favorito[]
  tipoComida        TipoComida          @relation(fields: [idTipoComida], references: [id])
  tipoSabor         TipoSabor           @relation(fields: [idTipoSabor], references: [id])
  usuario           Usuario             @relation(fields: [usuarioId], references: [id])
  ingredientes      RecetaIngrediente[]
  reportes          Reporte[]
}

model TipoComida {
  id      Int      @id @default(autoincrement())
  nombre  String   @unique
  recetas Receta[]
}

model TipoSabor {
  id          Int      @id @default(autoincrement())
  nombreSabor NombreSabor
  recetas     Receta[]
}

model Ingrediente {
  id      Int                 @id @default(autoincrement())
  nombre  String              @unique
  Tipo    TipoIngrediente
  recetas RecetaIngrediente[]
}

model RecetaIngrediente {
  id            Int         @id @default(autoincrement())
  recetaId      Int
  ingredienteId Int
  cantidad      String
  ingrediente   Ingrediente @relation(fields: [ingredienteId], references: [id])
  receta        Receta      @relation(fields: [recetaId], references: [id])
}

model Comentario {
  id              Int       @id @default(autoincrement())
  usuarioId       Int
  recetaId        Int
  comentario      String
  fechaComentario DateTime  @default(now())
  receta          Receta    @relation(fields: [recetaId], references: [id])
  usuario         Usuario   @relation(fields: [usuarioId], references: [id])
  reportes        Reporte[]
}

model Calificacion {
  id                Int      @id @default(autoincrement())
  usuarioId         Int
  recetaId          Int
  puntuacion        Int
  fechaCalificacion DateTime @default(now())
  receta            Receta   @relation(fields: [recetaId], references: [id])
  usuario           Usuario  @relation(fields: [usuarioId], references: [id])
}

model Favorito {
  id            Int      @id @default(autoincrement())
  usuarioId     Int
  recetaId      Int
  fechaGuardado DateTime @default(now())
  receta        Receta   @relation(fields: [recetaId], references: [id])
  usuario       Usuario  @relation(fields: [usuarioId], references: [id])
}

model ListaCompra {
  id                Int      @id @default(autoincrement())
  usuarioId         Int
  nombreIngrediente String
  cantidad          Int
  fechaCreacion     DateTime @default(now())
  usuario           Usuario  @relation(fields: [usuarioId], references: [id])
}

model Notificacion {
  id                Int      @id @default(autoincrement())
  usuarioId         Int
  mensaje           String
  leida             Boolean  @default(false)
  fechaNotificacion DateTime @default(now())
  usuario           Usuario  @relation(fields: [usuarioId], references: [id])
}

model Reporte {
  id           Int         @id @default(autoincrement())
  usuarioId    Int
  recetaId     Int?
  comentarioId Int?
  motivo       String
  estado       String      @default("pendiente")
  fechaReporte DateTime    @default(now())
  comentario   Comentario? @relation(fields: [comentarioId], references: [id])
  receta       Receta?     @relation(fields: [recetaId], references: [id])
  usuario      Usuario     @relation(fields: [usuarioId], references: [id])
}

enum UserRole {
  ADMIN
  USUARIO
}


enum TipoIngrediente {
 Verduras
 Frutas 
 Cereales
 Alimentos_de_origen_animal
 Leguminosas
}

enum DificultadReceta {
Facil 
Medio
Dificil
}
enum NombreSabor {
Dulce 
Salado
Amargo
Acido
Umami
}