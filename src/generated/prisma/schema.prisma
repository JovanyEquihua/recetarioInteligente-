generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Calificacion {
  id                Int      @id @default(autoincrement())
  usuarioId         Int
  recetaId          Int
  puntuacion        Int
  fechaCalificacion DateTime @default(now())
  Receta            Receta   @relation(fields: [recetaId], references: [id])
  Usuario           Usuario  @relation(fields: [usuarioId], references: [id])
}

model Comentario {
  id              Int       @id @default(autoincrement())
  usuarioId       Int
  recetaId        Int
  comentario      String
  fechaComentario DateTime  @default(now())
  Receta          Receta    @relation(fields: [recetaId], references: [id])
  Usuario         Usuario   @relation(fields: [usuarioId], references: [id])
  Reporte         Reporte[]
}

model Cuenta {
  idUsuario         Int
  tipo              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  Usuario           Usuario  @relation(fields: [idUsuario], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Favorito {
  id            Int      @id @default(autoincrement())
  usuarioId     Int
  recetaId      Int
  fechaGuardado DateTime @default(now())
  Receta        Receta   @relation(fields: [recetaId], references: [id])
  Usuario       Usuario  @relation(fields: [usuarioId], references: [id])
}

model Ingrediente {
  id                Int                 @id @default(autoincrement())
  nombre            String              @unique
  Tipo              TipoIngrediente
  RecetaIngrediente RecetaIngrediente[]
}

model ListaCompra {
  id                Int      @id @default(autoincrement())
  usuarioId         Int
  nombreIngrediente String
  cantidad          Int
  fechaCreacion     DateTime @default(now())
  Usuario           Usuario  @relation(fields: [usuarioId], references: [id])
}

model Notificacion {
  id                Int      @id @default(autoincrement())
  usuarioId         Int
  mensaje           String
  leida             Boolean  @default(false)
  fechaNotificacion DateTime @default(now())
  Usuario           Usuario  @relation(fields: [usuarioId], references: [id])
}

model PasswordResetToken {
  id      String   @id
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Receta {
  id                Int                 @id @default(autoincrement())
  usuarioId         Int
  titulo            String
  descripcion       String
  tiempoPreparacion Int
  porciones         Int
  imagen            String
  fechaCreacion     DateTime            @default(now())
  idTipoComida      Int
  idTipoSabor       Int
  dificultad        DificultadReceta
  Calificacion      Calificacion[]
  Comentario        Comentario[]
  Favorito          Favorito[]
  TipoComida        TipoComida          @relation(fields: [idTipoComida], references: [id])
  TipoSabor         TipoSabor           @relation(fields: [idTipoSabor], references: [id])
  Usuario           Usuario             @relation(fields: [usuarioId], references: [id])
  RecetaIngrediente RecetaIngrediente[]
  Reporte           Reporte[]
}

model RecetaIngrediente {
  id            Int         @id @default(autoincrement())
  recetaId      Int
  ingredienteId Int
  cantidad      String
  Ingrediente   Ingrediente @relation(fields: [ingredienteId], references: [id])
  Receta        Receta      @relation(fields: [recetaId], references: [id])
}

model Reporte {
  id           Int         @id @default(autoincrement())
  usuarioId    Int
  recetaId     Int?
  comentarioId Int?
  motivo       String
  estado       String      @default("pendiente")
  fechaReporte DateTime    @default(now())
  Comentario   Comentario? @relation(fields: [comentarioId], references: [id])
  Receta       Receta?     @relation(fields: [recetaId], references: [id])
  Usuario      Usuario     @relation(fields: [usuarioId], references: [id])
}

model TipoComida {
  id     Int      @id @default(autoincrement())
  nombre String   @unique
  Receta Receta[]
}

model TipoSabor {
  id          Int         @id @default(autoincrement())
  nombreSabor NombreSabor
  Receta      Receta[]
}

model Usuario {
  id                 Int            @id @default(autoincrement())
  nombre             String
  apellidoP          String
  apellidoM          String?
  email              String         @unique
  contrase_a         String         @map("contrase√±a")
  fotoPerfil         String?
  preferencias       Json?
  fechaRegistro      DateTime       @default(now())
  nombreUsuario      String         @unique
  fechaActualizado   DateTime
  rol                UserRole       @default(USUARIO)
  biografia          String?
  primerInicioSesion Boolean        @default(false)
  titulo             String?
  verificado         Boolean        @default(false)
  Calificacion       Calificacion[]
  Comentario         Comentario[]
  Cuenta             Cuenta[]
  Favorito           Favorito[]
  ListaCompra        ListaCompra[]
  Notificacion       Notificacion[]
  Receta             Receta[]
  Reporte            Reporte[]
}

model VerificationToken {
  email   String   @unique
  token   String   @unique
  expires DateTime
  id      Int      @id @default(autoincrement())

  @@unique([email, token])
}

enum DificultadReceta {
  Facil
  Medio
  Dificil
}

enum NombreSabor {
  Dulce
  Salado
  Amargo
  Acido
  Umami
}

enum TipoIngrediente {
  Verduras
  Frutas
  Cereales
  Alimentos_de_origen_animal
  Leguminosas
}

enum UserRole {
  ADMIN
  USUARIO
}
